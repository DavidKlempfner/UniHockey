AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Deploys a minimal ECS Fargate Service accessible directly via a public IP
  on container port 8080 (no ALB). Tasks are deployed with AssignPublicIp: ENABLED.

Parameters:
  EnvironmentName:
    Type: String
    Default: Dev
    Description: Environment name for resource tagging.
  ImageRepoName:
    Type: String
    Default: my-app-repository
    Description: Name of the ECR repository containing the image.
  ImageTag:
    Type: String
    Default: latest
    Description: Docker image tag to deploy. This will be updated by CI/CD.
  SecretArn:
    Type: String
    Description: ARN of the AWS Secrets Manager secret for UniHockeySettings__David.
    ConstraintDescription: Must be a valid Secrets Manager ARN.
    
  # --- PARAMETERS FOR APPLICATION ---
  CassieEnvVarValue:
    Type: String
    Description: The plain string value for the UniHockeySettings__Cassie environment variable.
    
  # --- PARAMETERS FOR NETWORKING ---
  AppSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: >
      Comma-separated list of Subnet IDs. These MUST be public subnets 
      as the Fargate tasks require public IPs for direct internet access.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID where the subnets are located.

Resources:
  # --- 1. ECS Cluster ---
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${EnvironmentName}-WebAppCluster"
      
  # --- 2. Web App Security Group ---

  # 2A. WebApp Security Group: Allows inbound traffic from the internet on port 8080.
  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows 8080 traffic from the internet directly to the Fargate task.
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          # Source is the internet (0.0.0.0/0)
          CidrIp: 0.0.0.0/0 
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-WebApp-SG"
          
  # --- 3. IAM Roles (CRITICAL for Secrets access) ---
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EnvironmentName}-ECS-TaskExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource: !Ref SecretArn
  
  # --- 4. Task Definition ---
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${EnvironmentName}-WebAppTaskDef"
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: "256"
      Memory: "512"
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: web-app-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageRepoName}:${ImageTag}"
          PortMappings:
            # Container listens on port 8080
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs
          Environment:
            - Name: UniHockeySettings__Cassie
              Value: !Ref CassieEnvVarValue
          Secrets: 
            - Name: UniHockeySettings__David
              ValueFrom: !Ref SecretArn
              
  # --- 5. ECS Service (Standalone Fargate Task) ---
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Sub "${EnvironmentName}-WebAppService"
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          # CRITICAL CHANGE: Task needs a public IP to be accessible on the internet without an ALB
          AssignPublicIp: ENABLED
          Subnets: !Ref AppSubnets 
          # Task uses the WebApp Security Group
          SecurityGroups: 
            - !GetAtt WebAppSecurityGroup.GroupId
      # Removed LoadBalancers property entirely
          
  # --- 6. CloudWatch Log Group ---
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${EnvironmentName}-WebApp"
      RetentionInDays: 7
      
Outputs:
  ClusterName:
    Description: "The name of the ECS Cluster"
    Value: !Ref ECSCluster
  ServiceName:
    Description: "The name of the ECS Service"
    Value: !GetAtt ECSService.Name
  
  # Note: The public IP will be assigned to the running task, not the service itself.
  # You will need to retrieve the IP from the ECS Console or API after deployment.
